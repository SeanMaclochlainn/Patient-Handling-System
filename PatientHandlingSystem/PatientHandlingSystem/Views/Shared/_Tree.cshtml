@model IEnumerable<PatientHandlingSystem.Models.Node>

<script src="~/Scripts/vis.min.js"></script>
<link href="~/Content/vis.min.css" rel="stylesheet" />

<script type="text/javascript">
    var i;
    var nodes = new vis.DataSet();
    @foreach (var node in Model)
    {
        if(node.SolutionNode)
        {
            @:nodes.add({ id: @node.ID, label: previewSolution('@node.NodeText()'), shape: 'ellipse', color: 'green' });
        }
        else if(node.NodeValue == 0)
        {
            @:nodes.add({ id: @node.ID, label: '@node.NodeText()', shape: 'ellipse', color: 'red' });
        }
        else
        {
            @:nodes.add({ id: @node.ID, label: '@node.NodeText()', shape: 'ellipse', color: '#3280EA' });
        }
    }


    function previewSolution(fullText){
        return fullText.substring(0,10)+"...";
    }
    function insertLineBreaks(nodeText){
        if(nodeText.charAt(10) == ' '){
            return nodeText.slice(0,10)+'\n'+nodeText.slice(11,nodeText.length-1);
        }
        else {
            var spaceIndex = nodeText.indexOf(' ');
            var result = nodeText.slice(0,spaceIndex) +"\n"+nodeText.slice(spaceIndex+1, nodeText.length)
            console.log(result);
            return result;
        }
    }
    var edges = new vis.DataSet();


    @for (int j = 1; j < Model.Count(); j++)
    {
        @:edges.add({from: @Model.ElementAt(j).ParentID, to: @Model.ElementAt(j).ID, label: '@Model.ElementAt(j).edgeText()', color: '#3280EA' });
                }
    // create a network
    var container = document.getElementById('mynetwork');

    // provide the data in the vis format
    var data = {
        nodes: nodes,
        edges: edges
    };
    var options = {
        layout: {
            hierarchical: {
                direction: 'UD',   // UD, DU, LR, RL
                sortMethod: 'directed', // hubsize, directed
                nodeSpacing: 100
            }
        },
        physics: {
            enabled: false
        }
    };

    // initialize network
    var network = new vis.Network(container, data, options);

    var solutionNodeIds = [];//"Model.ElementAt(0).solutionNodeIds()";
    @foreach (var node in Model.Where(i=>i.SolutionNode == true))
    {
        @:solutionNodeIds.push({id:@node.ID, text:'@node.NodeText()'});
                    }
    console.log("dnids:"+solutionNodeIds);
    network.on("selectNode", function (params) {
        //console.log('selectNode Event:', params);
        $("<input type='hidden' id='ParentNodeID' name='ParentNodeID' value="+params.nodes+">").insertAfter("#button");
        console.log("checking node");
        //console.log("params.nodes: "+params.nodes+ "\nsolutionNodeIds: "+solutionNodeIds);
        //console.log("indexof: "+solutionNodeIds.indexOf(params.nodes));
        //console.log("params.nodes before for loop: "+params.nodes);
        for(var i = 0;i<solutionNodeIds.length;i++){
            //console.log("solution node id: "+ solutionNodeIds[i]+"params.nodes: "+params.nodes);
            //console.log("params.node before if: "+params.nodes);
            if(solutionNodeIds[i].id==params.nodes){
                //console.log("params.nodes in if: "+params.nodes);
                //console.log("solution node");
                //console.log("id; "+solutionNodeIds[i].id);
                //console.log("text"+solutionNodeIds[i].text)
                console.log("entering text");
                $("#Solution").val(solutionNodeIds[i].text);
                if ($(".attributeTab").is(":checked")) {
                    $("#solution").show();
                    $("#attribute").hide();
                    $(".attributeTab").prop('checked', false);
                    $(".solutionTab").prop('checked', true);
                }
            }
        }
    });


</script>
<div id="mynetwork" style="width:900px;height:600px;"></div>